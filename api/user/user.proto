syntax = "proto3";

package user;

option go_package = "github.com/danilkompaniets/go-chat-common/gen/user";

import "common/common.proto";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";


service UserService {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  rpc GetUserByID(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}"
    };
  }

  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users:search"
    };
  }

  rpc GetUsersByIDs(BatchGetUsersRequest) returns (BatchGetUsersResponse) {
    option (google.api.http) = {
      post: "/v1/users:batchGet"
      body: "*"
    };
  }

  rpc UpdateName(UpdateNameRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/v1/users/{user_id}/name"
      body: "*"
    };
  }

  rpc UpdateBio(UpdateBioRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      patch: "/v1/users/{user_id}/bio"
      body: "*"
    };
  }

  rpc SendFriendRequest(SendFriendRequestRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      post: "/v1/users/{from_user_id}/friends/requests"
      body: "*"
    };
  }

  rpc AcceptFriendRequest(AcceptFriendRequestRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/friends/requests/{request_id}:accept"
    };
  }

  rpc DeclineFriendRequest(DeclineFriendRequestRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/friends/requests/{request_id}:decline"
    };
  }

  rpc RemoveFriend(RemoveFriendRequest) returns (UpdateResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}/friends/{friend_id}"
    };
  }

  rpc GetFriends(GetFriendsRequest) returns (GetFriendsResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/friends"
    };
  }

  rpc GetIncomingRequests(GetRequestsRequest) returns (GetRequestsResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/friends/requests/incoming"
    };
  }

  rpc GetOutgoingRequests(GetRequestsRequest) returns (GetRequestsResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}/friends/requests/outgoing"
    };
  }
}

message GetUserRequest {
  int64 user_id = 1;
}

message GetUserResponse {
  common.User user = 1;
}

message SearchUsersRequest {
  string query = 1;
}

message SearchUsersResponse {
  repeated common.User users = 1;
}

message BatchGetUsersRequest {
  repeated int64 ids = 1;
}

message BatchGetUsersResponse {
  repeated common.User users = 1;
}

message UpdateNameRequest {
  int64 user_id = 1;
  string name = 2;
}

message UpdateBioRequest {
  int64 user_id = 1;
  string bio = 2;
}

message UpdateResponse {
  bool success = 1;
}

message SendFriendRequestRequest {
  int64 from_user_id = 1;
  int64 to_user_id = 2;
}

message AcceptFriendRequestRequest {
  int64 user_id = 1;
  int64 request_id = 2;
}

message DeclineFriendRequestRequest {
  int64 user_id = 1;
  int64 request_id = 2;
}

message RemoveFriendRequest {
  int64 user_id = 1;
  int64 friend_id = 2;
}

message GetFriendsRequest {
  int64 user_id = 1;
}

message GetFriendsResponse {
  repeated common.User friends = 1;
}

message GetRequestsRequest {
  int64 user_id = 1;
}

message FriendRequestInfo {
  int64 request_id = 1;
  string request_status = 2;
  google.protobuf.Timestamp created_at = 3;
  int64 user_id = 4;
  string user_name = 5;
  string user_bio = 6;
}

message GetRequestsResponse {
  repeated FriendRequestInfo requests = 1;
}

message CreateUserRequest {
  string name = 2;
  string bio = 3;
}

message CreateUserResponse {
}