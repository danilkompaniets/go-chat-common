// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: chat/chat.proto

package chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChatService_CreateChatWithUsers_FullMethodName = "/chat.ChatService/CreateChatWithUsers"
	ChatService_GetChatsForUser_FullMethodName     = "/chat.ChatService/GetChatsForUser"
	ChatService_GetMessagesForChat_FullMethodName  = "/chat.ChatService/GetMessagesForChat"
	ChatService_SendMessageToChat_FullMethodName   = "/chat.ChatService/SendMessageToChat"
	ChatService_UpdateMessageStatus_FullMethodName = "/chat.ChatService/UpdateMessageStatus"
	ChatService_AddChatMember_FullMethodName       = "/chat.ChatService/AddChatMember"
	ChatService_RemoveChatMember_FullMethodName    = "/chat.ChatService/RemoveChatMember"
)

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	CreateChatWithUsers(ctx context.Context, in *CreateChatWithUsersRequest, opts ...grpc.CallOption) (*Chat, error)
	GetChatsForUser(ctx context.Context, in *GetChatsForUserRequest, opts ...grpc.CallOption) (*GetChatsForUserResponse, error)
	GetMessagesForChat(ctx context.Context, in *GetMessagesForChatRequest, opts ...grpc.CallOption) (*GetMessagesForChatResponse, error)
	SendMessageToChat(ctx context.Context, in *SendMessageToChatRequest, opts ...grpc.CallOption) (*Message, error)
	UpdateMessageStatus(ctx context.Context, in *UpdateMessageStatusRequest, opts ...grpc.CallOption) (*MessageStatusUpdate, error)
	AddChatMember(ctx context.Context, in *ChatMemberUpdateRequest, opts ...grpc.CallOption) (*ChatMembers, error)
	RemoveChatMember(ctx context.Context, in *ChatMemberUpdateRequest, opts ...grpc.CallOption) (*ChatMembers, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateChatWithUsers(ctx context.Context, in *CreateChatWithUsersRequest, opts ...grpc.CallOption) (*Chat, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Chat)
	err := c.cc.Invoke(ctx, ChatService_CreateChatWithUsers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChatsForUser(ctx context.Context, in *GetChatsForUserRequest, opts ...grpc.CallOption) (*GetChatsForUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChatsForUserResponse)
	err := c.cc.Invoke(ctx, ChatService_GetChatsForUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetMessagesForChat(ctx context.Context, in *GetMessagesForChatRequest, opts ...grpc.CallOption) (*GetMessagesForChatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMessagesForChatResponse)
	err := c.cc.Invoke(ctx, ChatService_GetMessagesForChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) SendMessageToChat(ctx context.Context, in *SendMessageToChatRequest, opts ...grpc.CallOption) (*Message, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Message)
	err := c.cc.Invoke(ctx, ChatService_SendMessageToChat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UpdateMessageStatus(ctx context.Context, in *UpdateMessageStatusRequest, opts ...grpc.CallOption) (*MessageStatusUpdate, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MessageStatusUpdate)
	err := c.cc.Invoke(ctx, ChatService_UpdateMessageStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) AddChatMember(ctx context.Context, in *ChatMemberUpdateRequest, opts ...grpc.CallOption) (*ChatMembers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMembers)
	err := c.cc.Invoke(ctx, ChatService_AddChatMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) RemoveChatMember(ctx context.Context, in *ChatMemberUpdateRequest, opts ...grpc.CallOption) (*ChatMembers, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChatMembers)
	err := c.cc.Invoke(ctx, ChatService_RemoveChatMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility.
type ChatServiceServer interface {
	CreateChatWithUsers(context.Context, *CreateChatWithUsersRequest) (*Chat, error)
	GetChatsForUser(context.Context, *GetChatsForUserRequest) (*GetChatsForUserResponse, error)
	GetMessagesForChat(context.Context, *GetMessagesForChatRequest) (*GetMessagesForChatResponse, error)
	SendMessageToChat(context.Context, *SendMessageToChatRequest) (*Message, error)
	UpdateMessageStatus(context.Context, *UpdateMessageStatusRequest) (*MessageStatusUpdate, error)
	AddChatMember(context.Context, *ChatMemberUpdateRequest) (*ChatMembers, error)
	RemoveChatMember(context.Context, *ChatMemberUpdateRequest) (*ChatMembers, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChatServiceServer struct{}

func (UnimplementedChatServiceServer) CreateChatWithUsers(context.Context, *CreateChatWithUsersRequest) (*Chat, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChatWithUsers not implemented")
}
func (UnimplementedChatServiceServer) GetChatsForUser(context.Context, *GetChatsForUserRequest) (*GetChatsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatsForUser not implemented")
}
func (UnimplementedChatServiceServer) GetMessagesForChat(context.Context, *GetMessagesForChatRequest) (*GetMessagesForChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessagesForChat not implemented")
}
func (UnimplementedChatServiceServer) SendMessageToChat(context.Context, *SendMessageToChatRequest) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageToChat not implemented")
}
func (UnimplementedChatServiceServer) UpdateMessageStatus(context.Context, *UpdateMessageStatusRequest) (*MessageStatusUpdate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMessageStatus not implemented")
}
func (UnimplementedChatServiceServer) AddChatMember(context.Context, *ChatMemberUpdateRequest) (*ChatMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddChatMember not implemented")
}
func (UnimplementedChatServiceServer) RemoveChatMember(context.Context, *ChatMemberUpdateRequest) (*ChatMembers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveChatMember not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}
func (UnimplementedChatServiceServer) testEmbeddedByValue()                     {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	// If the following call pancis, it indicates UnimplementedChatServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_CreateChatWithUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChatWithUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateChatWithUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_CreateChatWithUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateChatWithUsers(ctx, req.(*CreateChatWithUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChatsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChatsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetChatsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChatsForUser(ctx, req.(*GetChatsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetMessagesForChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMessagesForChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetMessagesForChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_GetMessagesForChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetMessagesForChat(ctx, req.(*GetMessagesForChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_SendMessageToChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMessageToChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).SendMessageToChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_SendMessageToChat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).SendMessageToChat(ctx, req.(*SendMessageToChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UpdateMessageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMessageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UpdateMessageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_UpdateMessageStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UpdateMessageStatus(ctx, req.(*UpdateMessageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_AddChatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).AddChatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_AddChatMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).AddChatMember(ctx, req.(*ChatMemberUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_RemoveChatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMemberUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).RemoveChatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChatService_RemoveChatMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).RemoveChatMember(ctx, req.(*ChatMemberUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateChatWithUsers",
			Handler:    _ChatService_CreateChatWithUsers_Handler,
		},
		{
			MethodName: "GetChatsForUser",
			Handler:    _ChatService_GetChatsForUser_Handler,
		},
		{
			MethodName: "GetMessagesForChat",
			Handler:    _ChatService_GetMessagesForChat_Handler,
		},
		{
			MethodName: "SendMessageToChat",
			Handler:    _ChatService_SendMessageToChat_Handler,
		},
		{
			MethodName: "UpdateMessageStatus",
			Handler:    _ChatService_UpdateMessageStatus_Handler,
		},
		{
			MethodName: "AddChatMember",
			Handler:    _ChatService_AddChatMember_Handler,
		},
		{
			MethodName: "RemoveChatMember",
			Handler:    _ChatService_RemoveChatMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}
